<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security.xsd ">

    <!--<security:http auto-config="true" use-expressions="false">-->
    <security:http auto-config="true" use-expressions="true">
        <!-- 권한이 필요한 페이지 설정. access 는 해당 조건을 의미. -->
        <security:intercept-url pattern="/sample/all" access="permitAll"/>
        <!-- use-expression 을 false 로 설정했을 시에는 이하와 같이 작성.
         <security:intercept-url pattern="/sample/member" access="ROLE_MEMBER"/>
         -->
        <security:intercept-url pattern="/sample/member" access="hasRole('ROLE_MEMBER')"/>
        <security:intercept-url pattern="/sample/admin" access="hasRole('ROLE_ADMIN')"/>

        <security:form-login/>
        <security:access-denied-handler error-page="/accessError"/>
    </security:http>

    <security:authentication-manager>
        <security:authentication-provider>
            <security:user-service>
                <!-- spring security 5부터는 PasswordEncoder 가 반드시 필요하다. -->
                <!--<security:user name="member" password="member" authorities="ROLE_MEMBER"/>-->

                <!-- 이하의 정보를 갖는 유저를 설정하여 해당 유저를 로그인처리한다. -->
                <!-- 임시 방편으로 password 부분에 {noop} 을 붙혀 처리한다. -->
                <security:user name="member" password="{noop}member" authorities="ROLE_MEMBER"/>
                <security:user name="admin" password="{noop}admin" authorities="ROLE_MEMBER, ROLE_ADMIN"/>

            </security:user-service>
        </security:authentication-provider>
    </security:authentication-manager>

</beans>